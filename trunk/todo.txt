now:

	levelbutton
		make sure scene in editor changes  (scenegraph on dragon)
	component descriptions
		in current list tooltip
		only show up to line break in tooltips
	drag-n-drop animation folder
	dropdowns stay selected when mouse used to unfocus		
	textbox bug
		1)add textbox component
		2)edit component - graphic changes back
	gameover_scene
		switch to it after gameover
		set_gameover_scene
			scene component
			fadetime
			scene
	switch_scene to replace set_scene
		on_switch_scene callback for fades
		fadescene
			disable collisions?
			stop motion?
	put an example component in Pig_Demo
		spawner examples
			custom code example

bugs: 
	spawn location edges crashes editor intermittent
	motion zone component shows no pugview intermittent
	show menus when object is selected
	scene tree doesn't show selected object 
		when obj is first added?
		when scene is not shown during selection?
	leftover items in scene graph after deleting both layers
	crash - selecting an object while changing selectionwin to another view 

later: 
	hotspots
	multiline textbox
	component that adds components example
		add_each then delete self
		ability to do it in editor
	make mouse dragging automatically use offset
	memory leak!
	run in single thread...
		problem picking up arrow keys in opioid window
	Undo! - save query when changing levels or quitting
	Separate runtime necessities
	Resources
	pug should have way to specify correct values
	process mouseclicks in canvas within interface, not in opioid thread
	allow lists of categories for components... file in multiple places
	figure out actual path to python executable
	option to open component,sprite,scene file. default save is project component file
	make mouse follow stop properly with 'stop_within'
	set gname
		demo of heads watching a ufo
	figure out some way to make derived classes work better
		probably option to select base class
	clone sprites
		allow gnamed objects in objects dropdown (e.g. Spawner)
		component copy
		scene_archetype - in list with object types
			OR is it a savesprite callback and a component that lets you save
				it in a scene folder
	project_pack folder
	
	#TODO: integer agui (with spinners?)
		derive from generic
		range
	#TODO: float agui
		derive from generic
		limit float precision output
		range
	make progress bar move during load
		loading window... update by percentage in postinit
	add component label
		show in parenthesis in dropdown
		add component(label)
			if label in components.labellist, replace
			on codexport no need to delete
		update archetype:
			if you have a dupe component and new class has label, label the dupe
		has_duplicate_of(comp, check_label=True)
		use gname?
		find_by_label
	open console window
	font size for scene class
	make opioid not respond during modal stuff
	make objects imports absolute
	warn about duplicate gnames
	multiple selection
	custom menu creation
		in templates:
		'menus': {'__order__':[],name1:[]...,name2:[]...}
	validators for pug data
	function to open browser for tutorial
	sort component browser
		by type
		by package
	make very simple editor interface... 
		ctrl-c, ctrl-v, ctrl-x, delete (on scenegraph too... maybe pass off)
		grid and snap-to
	make subobjects work for code storage... move components to end
	code_storage list ala templates... no functionality in object
	app = showPugFrame/getPugFrame should return lists
	log all exceptions that are glossed over by automation
	refactor scene and object dict into utils, only store strings in dropdowns
	auto-refresh -- leave the attribute being editted alone
	particles
	list agui
		create accessor object
			listob.item1
			dictob.str(key)
	component upgrades
		allow option for not adding component_methods to object
		allow option to add attributes as well as methods
		make component system something you can add on later
			not necessary to derive
	
	
not understand:

looks:
	
useability:
	code_storage dict features: 
		refactor get_storage_info... totally unneccessary
		derive class from CodeStorageExporter instead of customfunc
	allow template to specify 'persist' so as not to use proxies
	allow Routine aguidict 'argstring' instead of arguments
	add refresh object option to pug view - to refresh actual puglist
	make subobject subobject_small and subobject show ala components
	list,dictionary,and tuple attribute guis can also work like components
	make code_export functions and dicts separate from obj's?
		reason would be to take out of release version
todo:

installer:
	create pig and pug msi's
	create pig_demo folder
	gather prereqs
	create nsis installer
		checkboxes for prerequisites
		checkboxes for pig pug
		checkbox and location for pig_demo installation

soon:
	eliminate hacks
	preload sounds in components
	very basic collision rect component
	eliminate demo project
		import files from project
		create demo files folder
		new_project
		new_demo_project
		open_project
	joystick controls have heldkey problem
		keep array of pressed keys in director
		no key down when key is down
		no key up when key is up
 	master volume
	'loading' graphic while scene saves, or at least cleanup
	destroy on gameover
	level on group empty
	
	option for gameover pause
	option for gameover timer
 	collide_add_component
 		disable and name
 		add named component to collided object
 		on_collide
 		spawn
 	collide_remove_component
 		name
 	set_attribute on collide
 	set_component attribute on collide
	try to return to selected object and reopen components
		internal save, then give objects ids...
	gameover
		gameover_settings
			gameover_pause t/f
			delay before gameover
		scene
			switch to it after gameover
			set_gameover_scene
				scene component
				fadetime
				scene
	change_scene
		check values holding steady
		timer
		ala delete in sprite
	switch_scene to replace set_scene
		on_switch_scene callback for fades
		fadescene
			disable collisions?
			stop motion?
	grid units
	drag-n-drop animation folder
	extra life at
	shoot_at component
	spawn_this_archetype component
	search component book

Opioid2D:
	actions relative to rotation
	check visibility

bugs: 
	spawn location edges crashes editor intermittent
	motion zone component shows no pugview intermittent
	show menus when object is selected
	crash - selecting an object while changing selectionwin to another view 

later: 
	collapsible
		component view
		collapsible pane for extended view
		foldpanelextended for components
	scene utility volume controls
		just ctrl- and ctrl= keys for now
	component interface
		better looking tree
		search
		make supertooltip info about components
	realtime resolution changes
	hotspots for all sprites
	multiline textbox
	memory leak!
	run in single thread...
		problem picking up arrow keys in opioid window
	control w/variance or 'to' option
	Separate runtime necessities
	Resources
	pug should have way to specify correct values
	process mouseclicks in canvas within interface, not in opioid thread
	allow lists of categories for components... file in multiple places
	option to sort by component _set in component browser
	option to open component file. default save is project component file
	make mouse follow stop properly with 'stop_within'
	figure out some way to make derived classes work better
		probably option to select base class
	clone sprites
		allow gnamed objects in objects dropdown (e.g. Spawner)
		component copy
		scene_archetype - in list with object types
			OR is it a savesprite callback and a component that lets you save
				it in a scene folder
	project_pack folder
	
	#TODO: integer agui (with spinners?)
		derive from generic
		range
	make progress bar move during load
		loading window... update by percentage in postinit
	add component label
		show in parenthesis in dropdown
		add component(label)
			if label in components.labellist, replace
			on codexport no need to delete
		update archetype:
			if you have a dupe component and new class has label, label the dupe
		has_duplicate_of(comp, check_label=True)
		use gname?
		find_by_label
	font size for scene class
	make opioid not respond during modal stuff
	make objects imports absolute
	warn about duplicate gnames
	multiple selection
	custom menu creation
		in templates:
		'menus': {'__order__':[],name1:[]...,name2:[]...}
	validators for pug data
	function to open browser for tutorial
	sort component browser
		by type
		by package
	make very simple editor interface... 
		grid and snap-to
	code_storage list ala templates... no functionality in object
	app = showPugFrame/getPugFrame should return lists
	log all exceptions that are glossed over by automation
	auto-refresh -- leave the attribute being editted alone
	particles
	list agui
		create accessor object
			listob.item1
			dictob.str(key)
	component upgrades
		allow option for not adding component_methods to object
		allow option to add attributes as well as methods
		make component system something you can add on later
			not necessary to derive
	
	
not understand:

looks:
	
useability:
	code_storage dict features: 
		refactor get_storage_info... totally unneccessary
		derive class from CodeStorageExporter instead of customfunc
	allow template to specify 'persist' so as not to use proxies
	add refresh object option to pug view - to refresh actual puglist
	make subobject subobject_small and subobject show ala components
	list,dictionary,and tuple attribute guis can also work like components
	make code_exporter functions and dicts separate from obj's?
		reason would be to take out of release version